// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("HEROKU_POSTGRESQL_CYAN_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Gender {
  male
  female
}

enum Size {
  xs
  sm
  md
  lg
  xl
  xxl
}

model Product {
  id          String      @id @default(cuid())
  name        String
  price       Int
  size        Size
  image       String?
  description String
  detail      String?
  orderItem   OrderItem[]
}

model Order {
  id          String      @id @default(cuid())
  createdAt   DateTime    @default(now())
  totalAmount Float
  state       String
  detail      String?
  User        User?       @relation(fields: [userId], references: [id])
  userId      String?
  orderItems  OrderItem[]
  shipment    Shipment[]
  invoice     Invoice[]
}

model OrderItem {
  id        String   @id @default(cuid())
  quantity  Int
  price     Float
  detail    String?
  Order     Order?   @relation(fields: [orderId], references: [id])
  orderId   String?
  Product   Product? @relation(fields: [productId], references: [id])
  productId String?
}

model Payment {
  id        String   @id @default(cuid())
  amount    Float
  state     String
  createdAt DateTime @default(now())
  Invoice   Invoice? @relation(fields: [invoiceId], references: [id])
  invoiceId String?
}

model Shipment {
  id             String   @id @default(cuid())
  trackingNumber String
  createdAt      DateTime @default(now())
  detail         String?
  Order          Order?   @relation(fields: [orderId], references: [id])
  orderId        String?
  Invoice        Invoice? @relation(fields: [invoiceId], references: [id])
  invoiceId      String?
}

model Invoice {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  detail    String?
  Order     Order?     @relation(fields: [orderId], references: [id])
  orderId   String?
  shipment  Shipment[]
  payment   Payment[]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  addresses     Address[]
  orders        Order[]
}

model Address {
  id         String  @id @default(cuid())
  line1      String
  line2      String?
  line3      String?
  city       String?
  postalCode String
  User       User?   @relation(fields: [userId], references: [id])
  userId     String?
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
